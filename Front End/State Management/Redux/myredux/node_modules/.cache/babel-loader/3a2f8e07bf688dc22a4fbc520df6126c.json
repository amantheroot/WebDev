{"ast":null,"code":"import _objectSpread from \"/opt/lampp/htdocs/WebDev/Front End/State Management/Redux/myredux/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport axios from \"axios\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport promise from \"redux-promise-middleware\"; // const reducer = (state, action) => {\n//   switch (action.type) {\n//     case \"INC\":\n//       return state + action.payload;\n//     case \"DEC\":\n//       return state - action.payload;\n//     case \"MUL\":\n//       return state * action.payload;\n//     case \"DIV\":\n//       return state / action.payload;\n//     case \"POW\":\n//       return state ** action.payload;\n//     default:\n//       return state;\n//   }\n// };\n// const store = createStore(reducer, 0);\n// store.subscribe(() => {\n//   console.log(\"Store Changed: \", store.getState());\n// });\n// store.dispatch({ type: \"INC\", payload: 1 });\n// store.dispatch({ type: \"INC\", payload: 1 });\n// store.dispatch({ type: \"DEC\", payload: 1 });\n// store.dispatch({ type: \"MUL\", payload: 10 });\n// store.dispatch({ type: \"DIV\", payload: 5 });\n// store.dispatch({ type: \"POW\", payload: 2 });\n// store.dispatch({ type: \"IDONTCARe\", payload: 1 });\n// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n// const InitialUser = {\n//   name: \"Aman\",\n//   age: 17,\n//   gender: \"MALE\"\n// };\n// const InitialMovies = [\n//   {\n//     name: \"FAF\",\n//     rating: 0\n//   },\n//   {\n//     name: \"FAF2\",\n//     rating: 0\n//   },\n//   {\n//     name: \"FAF3\",\n//     rating: 0\n//   },\n//   {\n//     name: \"FAF4\",\n//     rating: 0\n//   },\n//   {\n//     name: \"FAF5\",\n//     rating: 2\n//   }\n// ];\n// const UserReducer = (state = InitialUser, action) => {\n//   let Duplistate = JSON.parse(JSON.stringify(state));\n//   switch (action.type) {\n//     case \"CHANGE_NAME\":\n//       Duplistate.name = action.payload;\n//       break;\n//     case \"CHANGE_AGE\":\n//       Duplistate.age = action.payload;\n//       break;\n//     case \"CHANGE_GENDER\":\n//       Duplistate.gender = action.payload;\n//       break;\n//     default:\n//       break;\n//   }\n//   return Duplistate;\n// };\n// const MoviesReducer = (state = InitialMovies, action) => {\n//   let Duplistate = JSON.parse(JSON.stringify(state));\n//   switch (action.type) {\n//     case \"RATE_MOVIE\":\n//       Duplistate.push(action.payload);\n//       break;\n//     default:\n//       break;\n//   }\n//   return Duplistate;\n// };\n// const reducers = combineReducers({\n//   userInfo: UserReducer,\n//   MoviesWatched: MoviesReducer\n// });\n// const store = createStore(reducers);\n// store.subscribe(() => {\n//   console.log(\"Store Changed: \", store.getState());\n// });\n// store.dispatch({ type: \"CHANGE_NAME\", payload: \"AMANDO\" });\n// store.dispatch({ type: \"CHANGE_AGE\", payload: 18 });\n// store.dispatch({ type: \"CHANGE_GENDER\", payload: \"BISEXUAL\" });\n// store.dispatch({ type: \"RATE_MOVIE\", payload: { name: \"FAF6\", rating: -78 } });\n// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n// const reducer = (state, action) => {\n//   switch (action.type) {\n//     case \"INC\":\n//       return state + action.payload;\n//     case \"DEC\":\n//       return state - action.payload;\n//     case \"MUL\":\n//       return state * action.payload;\n//     case \"DIV\":\n//       return state / action.payload;\n//     case \"POW\":\n//       return state ** action.payload;\n//     default:\n//       return state;\n//   }\n// };\n// const logger = state => next => action => {\n//   console.log(\"Logged: \");\n//   console.log(\"ACTION TYPE: \", action.type);\n//   console.log(\"ACTION PAYLOAD: \", action.payload);\n//   next(action);\n// };\n// const errorhandler = state => next => action => {\n//   try {\n//     next(action);\n//   } catch (error) {\n//     console.log(\"OMG WHAT NOW?! \", error);\n//   }\n// };\n// const annoyer = state => next => action => {\n//   //   action.type = \"POW\";\n//   next(action);\n// };\n// const middleware = applyMiddleware(logger, errorhandler, annoyer);\n// const store = createStore(reducer, 0, middleware);\n// store.subscribe(() => {\n//   console.log(\"Store Changed: \", store.getState());\n// });\n// store.dispatch({ type: \"INC\", payload: 1 });\n// store.dispatch({ type: \"INC\", payload: 1 });\n// store.dispatch({ type: \"DEC\", payload: 1 });\n// store.dispatch({ type: \"MUL\", payload: 10 });\n// store.dispatch({ type: \"DIV\", payload: 5 });\n// store.dispatch({ type: \"POW\", payload: 2 });\n// store.dispatch({ type: \"IDONTCARe\", payload: 1 });\n// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nvar InitialState = {\n  users: [],\n  error: null,\n  fetching: false,\n  fetched: false\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : InitialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"FETCH_USER_PENDING\":\n      return _objectSpread({}, state, {\n        fetching: true\n      });\n\n    case \"FETCH_USER_REJECTED\":\n      return _objectSpread({}, state, {\n        fetching: false,\n        fetched: true,\n        error: action.payload\n      });\n\n    case \"FETCH_USER_FULFILLED\":\n      return _objectSpread({}, state, {\n        fetching: false,\n        fetched: true,\n        users: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar middleware = applyMiddleware(promise(), thunk, logger());\nvar state = createStore(reducer, middleware);\nstate.dispatch({\n  type: \"FETCH_USER\",\n  payload: axios.get(\"https://rest.learncode.academy/api/wstern/users\")\n});","map":{"version":3,"sources":["/opt/lampp/htdocs/WebDev/Front End/State Management/Redux/myredux/src/index.js"],"names":["createStore","combineReducers","applyMiddleware","axios","createLogger","thunk","promise","InitialState","users","error","fetching","fetched","reducer","state","action","type","payload","middleware","logger","dispatch","get"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,OAAP,MAAoB,0BAApnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,QAAQ,EAAE,KAHS;AAInBC,EAAAA,OAAO,EAAE;AAJU,CAArB;;AAOA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAChD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,oBAAL;AACE,+BAAYF,KAAZ;AAAmBH,QAAAA,QAAQ,EAAE;AAA7B;;AACF,SAAK,qBAAL;AACE,+BACKG,KADL;AAEEH,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,OAAO,EAAE,IAHX;AAIEF,QAAAA,KAAK,EAAEK,MAAM,CAACE;AAJhB;;AAMF,SAAK,sBAAL;AACE,+BACKH,KADL;AAEEH,QAAAA,QAAQ,EAAE,KAFZ;AAGEC,QAAAA,OAAO,EAAE,IAHX;AAIEH,QAAAA,KAAK,EAAEM,MAAM,CAACE;AAJhB;;AAMF;AACE,aAAOH,KAAP;AAlBJ;AAoBD,CArBD;;AAuBA,IAAMI,UAAU,GAAGf,eAAe,CAACI,OAAO,EAAR,EAAYD,KAAZ,EAAmBa,MAAM,EAAzB,CAAlC;AAEA,IAAML,KAAK,GAAGb,WAAW,CAACY,OAAD,EAAUK,UAAV,CAAzB;AAEAJ,KAAK,CAACM,QAAN,CAAe;AACbJ,EAAAA,IAAI,EAAE,YADO;AAEbC,EAAAA,OAAO,EAAEb,KAAK,CAACiB,GAAN,CAAU,iDAAV;AAFI,CAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport axios from \"axios\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport promise from \"redux-promise-middleware\";\n\n// const reducer = (state, action) => {\n//   switch (action.type) {\n//     case \"INC\":\n//       return state + action.payload;\n//     case \"DEC\":\n//       return state - action.payload;\n//     case \"MUL\":\n//       return state * action.payload;\n//     case \"DIV\":\n//       return state / action.payload;\n//     case \"POW\":\n//       return state ** action.payload;\n//     default:\n//       return state;\n//   }\n// };\n\n// const store = createStore(reducer, 0);\n\n// store.subscribe(() => {\n//   console.log(\"Store Changed: \", store.getState());\n// });\n\n// store.dispatch({ type: \"INC\", payload: 1 });\n// store.dispatch({ type: \"INC\", payload: 1 });\n// store.dispatch({ type: \"DEC\", payload: 1 });\n// store.dispatch({ type: \"MUL\", payload: 10 });\n// store.dispatch({ type: \"DIV\", payload: 5 });\n// store.dispatch({ type: \"POW\", payload: 2 });\n// store.dispatch({ type: \"IDONTCARe\", payload: 1 });\n\n// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n// const InitialUser = {\n//   name: \"Aman\",\n//   age: 17,\n//   gender: \"MALE\"\n// };\n// const InitialMovies = [\n//   {\n//     name: \"FAF\",\n//     rating: 0\n//   },\n//   {\n//     name: \"FAF2\",\n//     rating: 0\n//   },\n//   {\n//     name: \"FAF3\",\n//     rating: 0\n//   },\n//   {\n//     name: \"FAF4\",\n//     rating: 0\n//   },\n//   {\n//     name: \"FAF5\",\n//     rating: 2\n//   }\n// ];\n\n// const UserReducer = (state = InitialUser, action) => {\n//   let Duplistate = JSON.parse(JSON.stringify(state));\n//   switch (action.type) {\n//     case \"CHANGE_NAME\":\n//       Duplistate.name = action.payload;\n//       break;\n//     case \"CHANGE_AGE\":\n//       Duplistate.age = action.payload;\n//       break;\n//     case \"CHANGE_GENDER\":\n//       Duplistate.gender = action.payload;\n//       break;\n//     default:\n//       break;\n//   }\n//   return Duplistate;\n// };\n// const MoviesReducer = (state = InitialMovies, action) => {\n//   let Duplistate = JSON.parse(JSON.stringify(state));\n//   switch (action.type) {\n//     case \"RATE_MOVIE\":\n//       Duplistate.push(action.payload);\n//       break;\n//     default:\n//       break;\n//   }\n//   return Duplistate;\n// };\n\n// const reducers = combineReducers({\n//   userInfo: UserReducer,\n//   MoviesWatched: MoviesReducer\n// });\n\n// const store = createStore(reducers);\n\n// store.subscribe(() => {\n//   console.log(\"Store Changed: \", store.getState());\n// });\n\n// store.dispatch({ type: \"CHANGE_NAME\", payload: \"AMANDO\" });\n// store.dispatch({ type: \"CHANGE_AGE\", payload: 18 });\n// store.dispatch({ type: \"CHANGE_GENDER\", payload: \"BISEXUAL\" });\n// store.dispatch({ type: \"RATE_MOVIE\", payload: { name: \"FAF6\", rating: -78 } });\n\n// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\n// const reducer = (state, action) => {\n//   switch (action.type) {\n//     case \"INC\":\n//       return state + action.payload;\n//     case \"DEC\":\n//       return state - action.payload;\n//     case \"MUL\":\n//       return state * action.payload;\n//     case \"DIV\":\n//       return state / action.payload;\n//     case \"POW\":\n//       return state ** action.payload;\n//     default:\n//       return state;\n//   }\n// };\n\n// const logger = state => next => action => {\n//   console.log(\"Logged: \");\n//   console.log(\"ACTION TYPE: \", action.type);\n//   console.log(\"ACTION PAYLOAD: \", action.payload);\n//   next(action);\n// };\n// const errorhandler = state => next => action => {\n//   try {\n//     next(action);\n//   } catch (error) {\n//     console.log(\"OMG WHAT NOW?! \", error);\n//   }\n// };\n// const annoyer = state => next => action => {\n//   //   action.type = \"POW\";\n//   next(action);\n// };\n\n// const middleware = applyMiddleware(logger, errorhandler, annoyer);\n\n// const store = createStore(reducer, 0, middleware);\n\n// store.subscribe(() => {\n//   console.log(\"Store Changed: \", store.getState());\n// });\n\n// store.dispatch({ type: \"INC\", payload: 1 });\n// store.dispatch({ type: \"INC\", payload: 1 });\n// store.dispatch({ type: \"DEC\", payload: 1 });\n// store.dispatch({ type: \"MUL\", payload: 10 });\n// store.dispatch({ type: \"DIV\", payload: 5 });\n// store.dispatch({ type: \"POW\", payload: 2 });\n// store.dispatch({ type: \"IDONTCARe\", payload: 1 });\n\n// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n\nconst InitialState = {\n  users: [],\n  error: null,\n  fetching: false,\n  fetched: false\n};\n\nconst reducer = (state = InitialState, action) => {\n  switch (action.type) {\n    case \"FETCH_USER_PENDING\":\n      return { ...state, fetching: true };\n    case \"FETCH_USER_REJECTED\":\n      return {\n        ...state,\n        fetching: false,\n        fetched: true,\n        error: action.payload\n      };\n    case \"FETCH_USER_FULFILLED\":\n      return {\n        ...state,\n        fetching: false,\n        fetched: true,\n        users: action.payload\n      };\n    default:\n      return state;\n  }\n};\n\nconst middleware = applyMiddleware(promise(), thunk, logger());\n\nconst state = createStore(reducer, middleware);\n\nstate.dispatch({\n  type: \"FETCH_USER\",\n  payload: axios.get(\"https://rest.learncode.academy/api/wstern/users\")\n});\n"]},"metadata":{},"sourceType":"module"}