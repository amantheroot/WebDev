{"ast":null,"code":"import _toConsumableArray from \"/opt/lampp/htdocs/WebDev/Front End/State Management/Redux/react-redux-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/opt/lampp/htdocs/WebDev/Front End/State Management/Redux/react-redux-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport default function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    tweets: [],\n    fetching: false,\n    fetched: false,\n    error: null\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"FETCH_TWEETS\":\n      {\n        return _objectSpread({}, state, {\n          fetching: true\n        });\n      }\n\n    case \"FETCH_TWEETS_REJECTED\":\n      {\n        return _objectSpread({}, state, {\n          fetching: false,\n          error: action.payload\n        });\n      }\n\n    case \"FETCH_TWEETS_FULFILLED\":\n      {\n        return _objectSpread({}, state, {\n          fetching: false,\n          fetched: true,\n          tweets: action.payload\n        });\n      }\n\n    case \"ADD_TWEET\":\n      {\n        return _objectSpread({}, state, {\n          tweets: _toConsumableArray(state.tweets).concat([action.payload])\n        });\n      }\n\n    case \"UPDATE_TWEET\":\n      {\n        var _action$payload = action.payload,\n            id = _action$payload.id,\n            text = _action$payload.text;\n\n        var newTweets = _toConsumableArray(state.tweets);\n\n        var tweetToUpdate = newTweets.findIndex(function (tweet) {\n          return tweet.id === id;\n        });\n        newTweets[tweetToUpdate] = action.payload;\n        return _objectSpread({}, state, {\n          tweets: newTweets\n        });\n      }\n\n    case \"DELETE_TWEET\":\n      {\n        return _objectSpread({}, state, {\n          tweets: state.tweets.filter(function (tweet) {\n            return tweet.id !== action.payload;\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/WebDev/Front End/State Management/Redux/react-redux-app/src/reducers/tweetsreducer.js"],"names":["reducer","state","tweets","fetching","fetched","error","action","type","payload","id","text","newTweets","tweetToUpdate","findIndex","tweet","filter"],"mappings":";;AAAA,eAAe,SAASA,OAAT,GAQb;AAAA,MAPAC,KAOA,uEAPQ;AACNC,IAAAA,MAAM,EAAE,EADF;AAENC,IAAAA,QAAQ,EAAE,KAFJ;AAGNC,IAAAA,OAAO,EAAE,KAHH;AAINC,IAAAA,KAAK,EAAE;AAJD,GAOR;AAAA,MADAC,MACA;;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,cAAL;AAAqB;AACnB,iCAAYN,KAAZ;AAAmBE,UAAAA,QAAQ,EAAE;AAA7B;AACD;;AACD,SAAK,uBAAL;AAA8B;AAC5B,iCAAYF,KAAZ;AAAmBE,UAAAA,QAAQ,EAAE,KAA7B;AAAoCE,UAAAA,KAAK,EAAEC,MAAM,CAACE;AAAlD;AACD;;AACD,SAAK,wBAAL;AAA+B;AAC7B,iCACKP,KADL;AAEEE,UAAAA,QAAQ,EAAE,KAFZ;AAGEC,UAAAA,OAAO,EAAE,IAHX;AAIEF,UAAAA,MAAM,EAAEI,MAAM,CAACE;AAJjB;AAMD;;AACD,SAAK,WAAL;AAAkB;AAChB,iCACKP,KADL;AAEEC,UAAAA,MAAM,qBAAMD,KAAK,CAACC,MAAZ,UAAoBI,MAAM,CAACE,OAA3B;AAFR;AAID;;AACD,SAAK,cAAL;AAAqB;AAAA,8BACEF,MAAM,CAACE,OADT;AAAA,YACXC,EADW,mBACXA,EADW;AAAA,YACPC,IADO,mBACPA,IADO;;AAEnB,YAAMC,SAAS,sBAAOV,KAAK,CAACC,MAAb,CAAf;;AACA,YAAMU,aAAa,GAAGD,SAAS,CAACE,SAAV,CAAoB,UAAAC,KAAK;AAAA,iBAAIA,KAAK,CAACL,EAAN,KAAaA,EAAjB;AAAA,SAAzB,CAAtB;AACAE,QAAAA,SAAS,CAACC,aAAD,CAAT,GAA2BN,MAAM,CAACE,OAAlC;AAEA,iCACKP,KADL;AAEEC,UAAAA,MAAM,EAAES;AAFV;AAID;;AACD,SAAK,cAAL;AAAqB;AACnB,iCACKV,KADL;AAEEC,UAAAA,MAAM,EAAED,KAAK,CAACC,MAAN,CAAaa,MAAb,CAAoB,UAAAD,KAAK;AAAA,mBAAIA,KAAK,CAACL,EAAN,KAAaH,MAAM,CAACE,OAAxB;AAAA,WAAzB;AAFV;AAID;;AACD;AACE,aAAOP,KAAP;AAvCJ;AAyCD","sourcesContent":["export default function reducer(\n  state = {\n    tweets: [],\n    fetching: false,\n    fetched: false,\n    error: null\n  },\n  action\n) {\n  switch (action.type) {\n    case \"FETCH_TWEETS\": {\n      return { ...state, fetching: true };\n    }\n    case \"FETCH_TWEETS_REJECTED\": {\n      return { ...state, fetching: false, error: action.payload };\n    }\n    case \"FETCH_TWEETS_FULFILLED\": {\n      return {\n        ...state,\n        fetching: false,\n        fetched: true,\n        tweets: action.payload\n      };\n    }\n    case \"ADD_TWEET\": {\n      return {\n        ...state,\n        tweets: [...state.tweets, action.payload]\n      };\n    }\n    case \"UPDATE_TWEET\": {\n      const { id, text } = action.payload;\n      const newTweets = [...state.tweets];\n      const tweetToUpdate = newTweets.findIndex(tweet => tweet.id === id);\n      newTweets[tweetToUpdate] = action.payload;\n\n      return {\n        ...state,\n        tweets: newTweets\n      };\n    }\n    case \"DELETE_TWEET\": {\n      return {\n        ...state,\n        tweets: state.tweets.filter(tweet => tweet.id !== action.payload)\n      };\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}